#!/bin/bash
set -eu

HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PROJECT_DIR="${HERE_DIR}/.."
OPENAI_KEY_FILE="${PROJECT_DIR}/.openapi.key"
ANTHROPIC_KEY_FILE="${PROJECT_DIR}/.anthropic.key"
LITELLM_CONFIG_FILE="${PROJECT_DIR}/litellm.local.yml"

export REPAIRCHAIN_WORKERS="${REPAIRCHAIN_WORKERS:-1}"
export REPAIRCHAIN_LOG_LEVEL="${REPAIRCHAIN_LOG_LEVEL:-DEBUG}"
export REPAIRCHAIN_SANITY_CHECK="${REPAIRCHAIN_SANITY_CHECK:-false}"
export REPAIRCHAIN_MINIMIZE_FAILURE="${REPAIRCHAIN_MINIMIZE_FAILURE:-true}"
export REPAIRCHAIN_EVALUATION_CACHE="${REPAIRCHAIN_EVALUATION_CACHE:-./.caches/evaluation.pkl}"
export REPAIRCHAIN_KASKARA_CACHE="${REPAIRCHAIN_KASKARA_CACHE:-./.caches/kaskara.pkl}"
export REPAIRCHAIN_ENABLE_KASKARA="${REPAIRCHAIN_ENABLE_KASKARA:-true}"
export REPAIRCHAIN_ENABLE_YOLO_REPAIR="${REPAIRCHAIN_ENABLE_YOLO_REPAIR:-true}"
export REPAIRCHAIN_ENABLE_TEMPLATE_REPAIR="${REPAIRCHAIN_ENABLE_TEMPLATE_REPAIR:-true}"
export REPAIRCHAIN_ENABLE_REVERSION_REPAIR="${REPAIRCHAIN_ENABLE_REVERSION_REPAIR:-true}"
export REPAIRCHAIN_TIME_LIMIT="${REPAIRCHAIN_TIME_LIMIT:-3600}"
export REPAIRCHAIN_LOG_TO_FILE="${REPAIRCHAIN_LOG_TO_FILE:-}"
export LITELLM_MODEL="${LITELLM_MODEL:-oai-gpt-4o}"

if ! poetry run which litellm &> /dev/null; then
  echo "LiteLLM is not installed. Please install LiteLLM before running this script."
  exit 1
fi

export OPENAI_API_KEY="$(cat "${OPENAI_KEY_FILE}")"
export ANTHROPIC_API_KEY="$(cat "${ANTHROPIC_KEY_FILE}")"
export AZURE_API_KEY=" "
export AZURE_API_BASE=" "


cleanup() {
  kill -9 ${LITELLM_PID}
}

run_litellm() {
    poetry run litellm -c $LITELLM_CONFIG_FILE &
    LITELLM_PID=$!
    trap cleanup SIGINT SIGTERM EXIT
}
